#!/usr/bin/env node

var fs = require('fs')
var Web3 = require('web3')
var web3 = new Web3()
var repoABI = require('./contracts/OrganizationABI.json')
var path = require('path')
var _ = require('lodash')
var SolidityFunction = require('web3/lib/web3/function')

var yargs = require('yargs')
  .usage('Usage: $0 [command]')
  .option('R', {
    alias: 'repo',
    describe: 'Repository address',
    type: 'string'
  })
  .option('account', {
    describe: 'Sender account (a current administrator)',
    type: 'string'
  })
  .option('name', {
      describe: 'Repository name',
      type: 'string'
  })
  .global([ 'repo', 'name' ])
  .command('list', 'List repositories')
  .command('create', 'Create repository')
  .strict()
  .version()
  .showHelpOnFail(false, 'Specify --help for available options')
  .help()
  .demand(1, 'Must provide a command')

var argv = yargs.argv
var command = argv._[0]

function abort (msg) {
  console.log(msg || 'Error occured')
  process.exit(1)
}

function ensureRepo () {
  if (!argv.repo) {
    abort('A repository address is mandatory for this operation')
  }

  if (!web3.isAddress(argv.repo)) {
    abort('Invalid repository address')
  }
}

function ensureAccount (account) {
  if (!account) {
    abort('An account is mandatory for this operation')
  }

  if (!web3.isAddress(account)) {
    abort('Invalid account')
  }
}

const privateKey = process.env.PRIVATE_KEY
const address = process.env.ADDRESS
const contractAddress = process.env.CONTRACT_ADDRESS

web3.setProvider(new web3.providers.HttpProvider('https://rinkeby.infura.io/AQLPHGoZNh6Ktd33vkIg'))

switch (command) {
  case 'create':
    let repoName = web3.fromAscii(argv.name)
    sendFunction('createRepo', [repoName], function (err, results) {
        if (err) {
            console.log(err)
        } else {
            console.log(results)
        }
    })

    break

  case 'list':
    let repos = web3.eth.contract(repoABI).at(argv.repo).listRepos()
    for (let repo of repos) {
        console.log(web3.toAscii(repo))
    }
    break
}

function sendFunction (functionName, payload, callback) {
    var solidityFunction = new SolidityFunction('', _.find(repoABI, { name: functionName }), '');
    const txhash = solidityFunction.toPayload(payload).data

    const key = new Buffer(privateKey, 'hex')
    const balance = web3.eth.getBalance(address)
    console.log('balance', balance.toString())

    const transaction = {
        data: txhash,
        from: address,
        to: contractAddress,
        gasPrice: 20000000000,
        gasLimit: 2000000,
        nonce: web3.eth.getTransactionCount(address)
    }

    const Tx = require('ethereumjs-tx')
    var tx = new Tx(transaction)

    tx.sign(key)

    var stx = tx.serialize();
    web3.eth.sendRawTransaction('0x' + stx.toString('hex'), function (err, results) {
        if (err) {
            callback(err, null)
        } else {
            callback(null, results)
        }
    });
}
